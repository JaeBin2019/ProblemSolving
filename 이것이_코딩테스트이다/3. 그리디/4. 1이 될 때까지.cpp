#include <iostream>
#include <algorithm>

using namespace std;

/*

    [ 문제 정리 ]
    어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 한다.
    단, 두 번째 연산은 N이 K로 나누어떨어질 때만 선택할 수 있다.
    1. N에서 1을 뺀다
    2. N을 K로 나눈다.
    최소 연산 횟수를 구하여라

    [ 해결 방법 ]
    N % K, N / K  연산을 반복하여 1이 될 때까지 계속한다.

    [ 자료형 ]
    int 범위 : 약 +- 21억
    2 <= K <= N <= 100,000


    [ 시간 복잡도 ]
    N = 100,000,000 (1억) => 1초
    O(N) = O(100,000) => 0.0001 초


*/

int main()
{
    int N, K;
    cin >> N >> K;

    int answer = 0;

    while (N != 0)
    {
        // 값이 나누어 떨어질 때까지 빼주고, 그 값만큼 연산 횟수를 추가한다
        answer += N % K;
        N -= N % K;

        // N 이 K 보다 클 때, 위에서 나머지를 빼줬기 때문에
        // N은 K로 나누어지는 값이므로, N을 K로 나눠주고 연산을 1회 추가한다
        if (N >= K)
        {
            ++answer;
            N /= K;
        }
    }

    // N이 1일때, -1 을 하여 0이 되는 경우 밖에 없으므로
    // answer 에서 연산 1회를 빼준다
    --answer;

    cout << answer;
}
